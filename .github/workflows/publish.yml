name: Publish to NPM

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Check if version changed
        id: version-check
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Check if this version exists on npm
          if npm view nodejs-bootstrapper@$CURRENT_VERSION version 2>/dev/null; then
            echo "Version $CURRENT_VERSION already exists on npm"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $CURRENT_VERSION is new, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Build package (if build script exists)
        if: steps.version-check.outputs.should_publish == 'true'
        run: |
          if npm run build --if-present; then
            echo "Build completed"
          else
            echo "No build script found, skipping..."
          fi

      - name: Publish to NPM
        if: steps.version-check.outputs.should_publish == 'true' && matrix.node-version == '20.x'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.should_publish == 'true' && matrix.node-version == '20.x'
        run: |
          gh release create "v${{ steps.version-check.outputs.version }}" \
            --title "Release v${{ steps.version-check.outputs.version }}" \
            --notes "## Changes in v${{ steps.version-check.outputs.version }}

          Auto-generated release for version ${{ steps.version-check.outputs.version }}

          ### Installation
          \`\`\`bash
          npm install -g nodejs-bootstrapper@${{ steps.version-check.outputs.version }}
          \`\`\`

          ### Usage
          \`\`\`bash
          init-project
          \`\`\`

          Or use with npx:
          \`\`\`bash
          npx nodejs-bootstrapper@${{ steps.version-check.outputs.version }}
          \`\`\`"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on success
        if: steps.version-check.outputs.should_publish == 'true' && matrix.node-version == '20.x'
        run: |
          echo "‚úÖ Successfully published nodejs-bootstrapper@${{ steps.version-check.outputs.version }} to NPM!"
          echo "üì¶ Package URL: https://www.npmjs.com/package/nodejs-bootstrapper"
          echo "üè∑Ô∏è  GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version-check.outputs.version }}"

      - name: Skip publishing (version exists)
        if: steps.version-check.outputs.should_publish == 'false'
        run: |
          echo "‚è≠Ô∏è  Skipping publish - version ${{ steps.version-check.outputs.version }} already exists on NPM"
          echo "üí° To publish a new version, update the version in package.json using:"
          echo "   npm version patch   # for bug fixes"
          echo "   npm version minor   # for new features"
          echo "   npm version major   # for breaking changes"
