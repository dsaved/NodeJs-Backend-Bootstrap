// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum GenderEnum {
  MALE   @map("0")
  FEMALE @map("1")
}

enum AccountStatusEnum {
  ACTIVE     @map("0")
  INACTIVE   @map("1")
  SUSPENDED  @map("2")
  PENDING    @map("3")
}

enum EmailStatusEnum {
  PENDING @map("0")
  SENT    @map("1")
  FAILED  @map("2")
}

enum NotificationTypeEnum {
  EMAIL @map("0")
  SMS   @map("1")
  PUSH  @map("2")
}

// Base model fields that all models inherit
model User {
  id                    String    @id @default(uuid())
  firstName             String?   @map("first_name") @db.VarChar(50)
  lastName              String?   @map("last_name") @db.VarChar(50)
  middleName            String?   @map("middle_name") @db.VarChar(50)
  gender                GenderEnum?
  phoneNumber           String?   @unique @map("phone_number") @db.VarChar(15)
  emailAddress          String    @unique @map("email") @db.VarChar(50)
  nin                   String?   @db.VarChar(11)
  password              String?
  verified              Boolean?  @default(false)
  requirePasswordChange Boolean?  @default(false) @map("require_password_change")
  twoFactorSecret       String?   @map("two_factor_secret")
  isTwoFactorEnabled    Boolean?  @default(false) @map("is_two_factor_enabled")
  status                AccountStatusEnum @default(ACTIVE)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  deletedAt             DateTime? @map("deleted_at")

  // Relations
  profileImage   ApplicationFile? @relation(fields: [profileImageId], references: [id])
  profileImageId String?          @map("profile_image")
  
  zone   Zone?   @relation(fields: [zoneId], references: [id])
  zoneId Int?    @map("zone")
  
  state   State? @relation(fields: [stateId], references: [id])
  stateId Int?   @map("state_id")
  
  lga   Lga?    @relation(fields: [lgaId], references: [id])
  lgaId Int?    @map("lga_id")
  
  ward   Ward?   @relation(fields: [wardId], references: [id])
  wardId Int?    @map("ward_id")
  
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")
  
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String? @map("role_id")

  // Reverse relations
  logs Log[]

  @@map("users")
  @@index([stateId], name: "users_state_index")
  @@index([lgaId], name: "users_lga_index")
  @@index([wardId], name: "users_ward_index")
  @@index([groupId], name: "users_group_index")
}

model Notification {
  id          String               @id @default(uuid())
  status      EmailStatusEnum
  to          String               @db.VarChar(50)
  from        String               @db.VarChar(100)
  subject     String               @db.VarChar(100)
  text        String               @db.Text
  seen        Boolean
  type        NotificationTypeEnum @default(EMAIL)
  attachments Json?
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  deletedAt   DateTime?            @map("deleted_at")

  @@map("notifications")
}

model ApplicationFile {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(100)
  key       String    @db.Text
  eTag      String    @map("e_tag") @db.Text
  mimeType  String    @map("mime_type") @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  users User[]

  @@map("application_files")
}

model Country {
  id          Int       @id @default(autoincrement())
  countryName String    @map("country_name") @db.VarChar(200)
  nationality String    @db.VarChar(200)
  alpha2code  String    @map("alpha_2_code") @db.VarChar(2)
  alpha3code  String    @map("alpha_3_code") @db.VarChar(3)
  numericCode String    @map("numeric_code") @db.VarChar(3)
  callingCode String    @map("calling_code") @db.VarChar(3)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  states State[]

  @@map("country")
}

model Zone {
  id        Int       @id @default(autoincrement())
  isActive  Boolean   @default(true) @map("is_active")
  zoneName  String    @unique @map("zone_name") @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  users  User[]
  states State[]

  @@map("zones")
}

model State {
  id        Int       @id @default(autoincrement())
  isActive  Boolean   @default(true) @map("is_active")
  stateCode String    @map("state_code") @db.VarChar(10)
  stateName String    @map("state_name") @db.VarChar(200)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int     @map("country_id")
  
  zone   Zone @relation(fields: [zoneId], references: [id])
  zoneId Int  @map("zone_id")
  
  users User[]
  lgas  Lga[]
  roles Role[]

  @@map("state")
  @@index([countryId], name: "states_country_index")
  @@index([zoneId], name: "states_zone_index")
}

model Lga {
  id        Int       @id @default(autoincrement())
  isActive  Boolean   @default(true) @map("is_active")
  lgaName   String    @map("lga_name") @db.VarChar(200)
  lgaCode   String    @map("lga_code") @db.VarChar(200)
  latitude  String?   @db.VarChar(100)
  longitude String?   @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  state   State @relation(fields: [stateId], references: [id])
  stateId Int   @map("state_id")
  
  users User[]
  wards Ward[]
  roles Role[]

  @@map("lga")
  @@index([stateId], name: "lga_state_index")
}

model Ward {
  id        Int       @id @default(autoincrement())
  isActive  Boolean   @default(true) @map("is_active")
  wardName  String    @map("ward_name") @db.VarChar(200)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  lga   Lga @relation(fields: [lgaId], references: [id])
  lgaId Int @map("lga_id")
  
  users User[]

  @@map("wards")
  @@index([lgaId], name: "wards_lga_index")
}

model Group {
  id         String    @id @default(uuid())
  groupName  String    @unique @map("group_name") @db.VarChar(100)
  scopeLevel BigInt    @default(0) @map("scope_level")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  // Relations
  users User[]
  roles Role[]

  @@map("groups")
  @@index([scopeLevel])
}

model Role {
  id       String  @id @default(uuid())
  roleName String  @unique @map("role_name") @db.VarChar(100)
  permission Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  group   Group @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")
  
  state   State? @relation(fields: [stateId], references: [id])
  stateId Int?   @map("state_id")
  
  lga   Lga?    @relation(fields: [lgaId], references: [id])
  lgaId Int?    @map("lga_id")
  
  users User[]

  @@map("roles")
}

model Log {
  id          Int       @id @default(autoincrement())
  action      String?   @db.VarChar(100)
  description String?   @db.Text
  tableName   String?   @map("table_name") @db.Text
  rowId       Int?      @map("row_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("logs")
}

model Otp {
  id           String    @id @default(uuid())
  email        String?   @db.VarChar(50)
  otp          String    @db.VarChar(10)
  otpIssuedAt  DateTime  @default(now()) @map("otp_issued_at")
  isUsed       Boolean   @default(false) @map("is_used")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  @@map("otps")
  @@unique([email, otp], name: "otp_un")
}

model Token {
  id        String    @id @default(uuid())
  tokenName String    @unique @map("token_name") @db.VarChar(200)
  jwt       String?   @db.Text
  expires   DateTime
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("tokens")
}

model TestNin {
  id        String    @id @default(uuid())
  nin       String    @unique @db.VarChar(11)
  ninData   Json      @map("nin_data")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("test_nins")
}
